//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tako.Modbus.Client
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Text;

    internal class TcpModbusRequest : AbsModbusRequest
    {
        private ushort? _transaction;
        private readonly ushort MODBUS_PROTOCOL = 0;
        private readonly ushort MODBUS_DEFAULT_LENGTH = 6;

        protected override byte[] CreateRequestMessage(byte Unit, EnumModbusFunctionCode FunctionCode, byte? MultiOutputLength, params byte[] Parameters)
        {
            if (this.TransactionID != null)
            {
                this._transaction = TransactionID;
            }
            if (this._transaction == null)
            {
                this._transaction = 0;
            }
            ushort dataLength = 0;
            if (MultiOutputLength == null)
            {
                dataLength = MODBUS_DEFAULT_LENGTH;
            }
            else
            {
                dataLength = (ushort)(MODBUS_DEFAULT_LENGTH + MultiOutputLength + 1);
            }
            using (MemoryStream memory = new MemoryStream())
            {
                memory.WriteByte((byte)(this._transaction >> 8));
                memory.WriteByte((byte)this._transaction);
                memory.WriteByte((byte)(MODBUS_PROTOCOL >> 8));
                memory.WriteByte((byte)MODBUS_PROTOCOL);
                memory.WriteByte((byte)(dataLength >> 8));
                memory.WriteByte((byte)dataLength);
                memory.WriteByte((byte)Unit);
                memory.WriteByte((byte)FunctionCode);
                memory.Write(Parameters, 0, Parameters.Length);
                this._transaction++;

                return memory.ToArray();
            }
        }
    }
}